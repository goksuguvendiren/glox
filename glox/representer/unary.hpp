//
// Auto-generated by Goksu Guvendiren Bakir. 
//

#pragma once

#include <utility>
#include "../token.hpp"
#include "expression.hpp"

namespace glox::repr
{
	class unary : public repr::expression
	{
	public:
		unary(
        std::unique_ptr<repr::opr> expr0,
		std::unique_ptr<repr::expression> expr1
		) : 
			expr0(std::move(expr0)),
			expr1(std::move(expr1))
		{}

		~unary() override = default;

		const repr::opr& get_expr0() const { return *expr0; }
		const repr::expression& get_expr1() const { return *expr1; }

	private:
        std::unique_ptr<repr::opr> expr0;
		std::unique_ptr<repr::expression> expr1;

		std::any accept(const visitor& visitor) const override
		{
			return visitor.visit_unary_expr(this);
		}
	};
}